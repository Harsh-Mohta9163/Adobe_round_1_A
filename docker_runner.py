# round1a/docker_runner.py
import os
import sys
import glob
import json
import pandas as pd

# This assumes your main pipeline logic is in complete_pipeline.py
from complete_pipeline import DocumentProcessingPipeline

def convert_csv_to_json(csv_file, output_dir):
    """Converts the final CSV from the pipeline to the expected JSON format."""
    try:
        df = pd.read_csv(csv_file)
        # Derive the original PDF name from the complex CSV name
        base_name = os.path.basename(csv_file)
        pdf_stem = base_name.split('truth_')[-1].replace('.csv', '').replace('.pdf', '')
        json_filename = f"{pdf_stem}.json"

        # Create the simple JSON structure Round 1B expects
        json_data = {"outline": []}
        for _, row in df.iterrows():
            block_data = {
                "text": row.get('text', ''),
                "level": row.get('hierarchy_level', 'Body'),
                "page": row.get('page_number', 1),
            }
            json_data["outline"].append(block_data)

        output_file = os.path.join(output_dir, json_filename)
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=4)
        print(f"‚úÖ Converted {os.path.basename(csv_file)} to {json_filename}")
        return True
    except Exception as e:
        print(f"‚ùå Error converting {csv_file}: {e}")
        return False

def main():
    """Main execution function for the Round 1A Docker container."""
    # Get paths from environment variables set by docker-compose
    print("hello from docker_runner.py")
    input_dir = os.getenv('INPUT_DIR', '/app/input')
    output_dir = os.getenv('OUTPUT_DIR', '/app/output')

    os.makedirs(input_dir, exist_ok=True)
    os.makedirs(output_dir, exist_ok=True)
    os.makedirs('/app/temp_results', exist_ok=True)
    if not input_dir or not output_dir:
        print("‚ùå Error: INPUT_DIR and OUTPUT_DIR environment variables must be set.")
        sys.exit(1)

    print("=" * 80)
    print("üê≥ EXECUTING ROUND 1A: HIERARCHY GENERATION üê≥")
    print(f"   Reading PDFs from: {input_dir}")
    print(f"   Saving JSON to: {output_dir}")
    print("=" * 80)
    
    # Initialize and run the pipeline from your existing script
    pipeline = DocumentProcessingPipeline(
        input_folder=input_dir, 
        final_output_folder="/app/temp_results"
    )

    
    if not pipeline.run_complete_pipeline():
        print("‚ùå Pipeline execution failed.")
        sys.exit(1)

    # Convert final CSV results to JSON in the correct output directory
    final_csvs = glob.glob(os.path.join(pipeline.final_output_folder, '*.csv'))
    if not final_csvs:
        print("‚ùå No final CSV results were generated by the pipeline.")
        sys.exit(1)
        
    for csv_file in final_csvs:
        convert_csv_to_json(csv_file, output_dir)
        
    print("\nüéâ Round 1A completed successfully!")

if __name__ == "__main__":
    main()